{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PokemonRow","pokemon","onClick","key","id","name","english","type","join","PokemonInfo","base","Object","keys","map","App","React","useState","filter","filterSet","selectedPokemon","selectedPokemonSet","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","value","onChange","evt","target","toLocaleLowerCase","includes","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"++hMAyBMA,G,MAAa,SAAH,OAAMC,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAAO,OACpC,oCACE,wBAAIC,IAAKF,EAAQG,IACf,4BAAKH,EAAQI,KAAKC,SAClB,4BAAKL,EAAQM,KAAKC,KAAK,OACvB,4BACE,4BAAQN,QAAS,kBAAMA,EAAQD,KAAU,yBAU3CQ,EAAc,SAAH,OAAcH,EAAO,EAAfD,KAAQC,QAAWI,EAAI,EAAJA,KAAI,OAC5C,6BACE,4BAAKJ,GACL,+BACE,+BACGK,OAAOC,KAAKF,GAAMG,KAAI,SAACV,GAAG,OACzB,wBAAIA,IAAKA,GACP,4BAAKA,GACL,4BAAKO,EAAKP,YA4DPW,MAlDf,WACE,MAA4BC,IAAMC,SAAS,IAAG,mBAAvCC,EAAM,KAAEC,EAAS,KACxB,EAA8CH,IAAMC,SAAS,MAAK,mBAA3DG,EAAe,KAAEC,EAAkB,KAE1C,OACE,yBACEC,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAGd,wBAAIC,UAAU,SAAQ,kBACtB,yBACEJ,MAAO,CACLK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,SAGjB,6BACE,2BACErB,KAAK,OACLsB,MAAOZ,EACPa,SAAU,SAACC,GAAG,OAAKb,EAAUa,EAAIC,OAAOH,UAE1C,2BAAON,MAAM,QACX,+BACGtB,EACEgB,QAAO,YAAkB,SAAfZ,KAAQC,QAEd2B,oBACAC,SAASjB,EAAOgB,wBAEpBE,MAAM,EAAG,IACTtB,KAAI,SAACZ,GAAO,OACX,kBAAC,EAAU,CACTA,QAASA,EACTC,QAAS,SAACD,GAAO,OAAKmB,EAAmBnB,YAMpDkB,GAAmB,kBAAC,EAAgBA,MC3FzBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1b53bf8.chunk.js","sourcesContent":["import React from \"react\";\nimport pokemon from \"./pokemon.json\";\nimport PropTypes from \"prop-types\";\n\nimport \"./App.css\";\n\nconst PokemonType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n    japanese: PropTypes.string.isRequired,\n    chinese: PropTypes.string.isRequired,\n    french: PropTypes.string.isRequired,\n  }),\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n});\n\nconst PokemonRow = ({ pokemon, onClick }) => (\n  <>\n    <tr key={pokemon.id}>\n      <td>{pokemon.name.english}</td>\n      <td>{pokemon.type.join(\", \")}</td>\n      <td>\n        <button onClick={() => onClick(pokemon)}>More Information</button>\n      </td>\n    </tr>\n  </>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.arrayOf(PokemonType),\n};\n\nconst PokemonInfo = ({ name: { english }, base }) => (\n  <div>\n    <h2>{english}</h2>\n    <table>\n      <tbody>\n        {Object.keys(base).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = PokemonType;\n\nfunction App() {\n  const [filter, filterSet] = React.useState(\"\");\n  const [selectedPokemon, selectedPokemonSet] = React.useState(null);\n\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        width: 800,\n        paddingTop: \"1em\",\n      }}\n    >\n      <h1 className=\"title\">Pokemon Search</h1>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"80% 20%\",\n          gridColumnGap: \"1rem\",\n        }}\n      >\n        <div>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={(evt) => filterSet(evt.target.value)}\n          />\n          <table width=\"100%\">\n            <tbody>\n              {pokemon\n                .filter(({ name: { english } }) =>\n                  english\n                    .toLocaleLowerCase()\n                    .includes(filter.toLocaleLowerCase())\n                )\n                .slice(0, 20)\n                .map((pokemon) => (\n                  <PokemonRow\n                    pokemon={pokemon}\n                    onClick={(pokemon) => selectedPokemonSet(pokemon)}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n        {selectedPokemon && <PokemonInfo {...selectedPokemon} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}